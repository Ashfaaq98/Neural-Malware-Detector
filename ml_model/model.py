"""
Performs Malware Detection using the trained Models
"""
import numpy
import re
from keras.preprocessing.sequence import pad_sequences
from keras.models import load_model
import pickle

# Function to use the deep learning keras model to detect Malware
def kerasmodel(name):

    model = load_model('ml_model/deepmalware.h5')

    with open("ml_model//tokenizer.pkl","rb") as token:
            tokenizer = pickle.load(token)

    with open("ml_model//pad-sequence.pkl","rb") as seq:
            max_sequence_length = pickle.load(seq)

    # Read new files
    new_texts = read_files(name)  # Label is not used for prediction

    # Tokenize and pad sequences for new data
    new_sequences = tokenizer.texts_to_sequences(new_texts)
    new_data = pad_sequences(new_sequences, maxlen=max_sequence_length)

    # Make predictions
    predictions = model.predict(new_data)
    print(predictions)

    if predictions > 0.5:
         pred = "Malicious"
    else:
         pred = "Benign"

    return pred , predictions

# Function to extract string features used by the Decision Tree Model
def get_string_features(name,hasher):
    # extract strings from binary file using regular expressions
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(name,encoding="ISO-8859-1")
    data = file_object.read()
    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)

    # store string features in dictionary form
    string_features = {}
    for string in strings:
        string_features[string] = 1

    # hash the features using the hashing trick
    hashed_features = hasher.transform([string_features])

    # do some data munging to get the feature array
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features = hashed_features[0]

    # return hashed string features
    print("Extracted {0} strings from {1}".format(len(string_features),name))
    return hashed_features

## Function to extract strings from binary used by the keras model
def read_files(name):
        
    texts = []
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)

    with open(name, 'r', encoding="ISO-8859-1") as file:
            text = file.read()
            pattern = re.compile(string_regexp)
            strings = pattern.findall(text)
            texts.append(strings)
            
    return texts