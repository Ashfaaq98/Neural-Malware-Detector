"""

"""

from flask import Flask , render_template , request , jsonify
import pickle
from flask_wtf import FlaskForm
from wtforms import FileField, SubmitField
from werkzeug.utils import secure_filename
import os
from wtforms.validators import InputRequired
from ml_model import model
import numpy as np
import warnings
warnings.filterwarnings("ignore")



# create flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = 'supersecretkey'
app.config['UPLOAD_FOLDER'] = 'static/files'



# Create File Form Class
class UploadFileForm(FlaskForm):
    file = FileField("File", validators=[InputRequired()])
    submit = SubmitField("Upload File")


# Define Landing Page
@app.route("/",methods=['GET',"POST"])
def home():
    form = UploadFileForm()
    
    return render_template('index.html', form=form)


# Define API Function
@app.route('/API', methods=['POST'])
def process_file():

    if 'file' not in request.files:
        return 'No file provided in the request', 400

    uploaded_file = request.files['file']
    if uploaded_file.filename == '':
        return 'Empty file provided in the request', 400
    
    # Save the file reeieved from the API request
    dir = os.path.dirname(__file__)
    uploaded_file.save(os.path.join(os.path.abspath(dir),app.config['UPLOAD_FOLDER'],secure_filename(uploaded_file.filename)))
   
    nam = os.path.join(dir,app.config['UPLOAD_FOLDER'],uploaded_file.filename)
    s = 'saved_detector.pkl'
    m = os.path.join(dir,s)
   
    with open(m ,"rb" ) as saved_detector:
        classifier, hasher = pickle.load(saved_detector)

    features = model.get_string_features(nam,hasher)
    z = features.reshape(1,-1)
    result_proba = classifier.predict_proba(z)[:,1]

    if result_proba > 0.5:
        response_data = {
        'status': 'Malware',
    }
        
        return jsonify(response_data)
    
    else:
        response_data = {
        'status': 'Benign',
    }
        
        return jsonify(response_data)


## Define Results Page
@app.route("/results", methods=['GET',"POST"])
def results():

    dir = os.path.dirname(__file__)
    form = UploadFileForm()

    if form.validate_on_submit():
        file = form.file.data # First grab the file
        file.save(os.path.join(os.path.abspath(dir),app.config['UPLOAD_FOLDER'],secure_filename(file.filename))) # Then save the file
        
    name = os.path.join(dir,app.config['UPLOAD_FOLDER'],file.filename)
    s = 'ml_model/model_1.pkl'
    m = os.path.join(dir,s)
   
    with open(s ,"rb" ) as saved_detector:
        classifier, hasher = pickle.load(saved_detector)

    features = model.get_string_features(name,hasher)



    z = features.reshape(1,-1)
    result_proba = classifier.predict_proba(z)[:,1]
   
    result_per = np.round(result_proba.item() * 100, 2)
    
    if result_proba > 0.7:
        res = "Malicious"       
        return render_template('results.html', pred=res,  result_per= result_per)
    
    elif result_proba > 0.5 and result_proba < 0.7:
        res , result_per = model.kerasmodel(name)
        if res == "Malicious":
            return render_template('results.html', pred="Malicious", result_per=result_per)
        else:
            return render_template('results.html', pred='Benign')
    
    else:
        res = "Benign"
        return render_template('results.html', pred=res)


